import { defineConfig } from 'tsup';
import { execSync } from 'child_process';

export default defineConfig({
  // Th√™m c√°c entry points cho client v√† nextjs
  entry: ['src/index.ts', 'src/styles.ts'],
  format: ['cjs', 'esm'],
  dts: true,
  splitting: false,
  sourcemap: false,
  clean: true,
  outDir: 'dist',
  external: ['react', 'react-dom'],
  
  // ƒê·∫£m b·∫£o CSS kh√¥ng ƒë∆∞·ª£c bundle tr·ª±c ti·∫øp v√†o JS
  treeshake: true,
  
  // X·ª≠ l√Ω CSS m·ªôt c√°ch ri√™ng bi·ªát
  esbuildPlugins: [
    {
      name: 'ignore-css',
      setup(build) {
        // ƒê√°nh d·∫•u CSS files l√† external ƒë·ªÉ x·ª≠ l√Ω sau
        build.onResolve({ filter: /\.css$/ }, args => {
          return { path: args.path, external: true }
        })
      }
    }
  ],
  
  // ƒê·∫∑t ƒë√∫ng ph·∫ßn m·ªü r·ªông cho output files
  outExtension({ format }) {
    return {
      js: format === 'cjs' ? '.cjs' : '.mjs',
    };
  },
  
  esbuildOptions(options) {
    // ƒê√°nh d·∫•u React l√† external ƒë·ªÉ tr√°nh c√°c v·∫•n ƒë·ªÅ bundling
    options.external = [
      ...new Set([
        ...(options.external || []), 
        'react', 
        'react-dom', 
        'react/jsx-runtime',
        // B·ªè qua c√°c CSS files
        '*.css'
      ])
    ];
    
    // ƒê·∫£m b·∫£o JSX runtime ƒë∆∞·ª£c x·ª≠ l√Ω ƒë√∫ng
    options.jsx = 'automatic';
  },
  
  // Ch·∫°y script build-fix.js sau khi build ho√†n th√†nh
  onSuccess: async () => {
    try {
      console.log('üîç Build completed, running post-build CSS processing...');
      execSync('node build-fix.js', { stdio: 'inherit' });
    } catch (error) {
      console.error('‚ö†Ô∏è Post-build processing failed:', error);
      // Kh√¥ng l√†m fail qu√° tr√¨nh build, ch·ªâ hi·ªÉn th·ªã c·∫£nh b√°o
    }
  },
});